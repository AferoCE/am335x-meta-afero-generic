#!/bin/sh

# File: firewall.user (BENTO_TARGET_1)
#
# This file is interpreted as shell script.
# Bento's custom iptables rules. The file is invoked via /etc/config/firewall
# which is executed with each firewall (re-)start.
#
# Internal uci firewall chains are flushed and recreated on reload, so
# put custom rules into the root chains e.g. INPUT or FORWARD or into the
# special user chains, e.g. input_wan_rule or postrouting_lan_rule.
#
# ref: original openwrt file: /etc/firewall.user

. /lib/afero_get_netif_names

WHITELIST_INTERFACES="$ETH_INTERFACE_0 $WIFISTA_INTERFACE_0 $WAN_INTERFACE_0"

IPTABLES="/usr/sbin/iptables"

#
# Afero rule chains: for allowed service, whitelist

AFERO_ALLOW_INCOMING_SERVICES=AFERO_ALLOW_SERVICE_INPUT
AFERO_ALLOW_OUTGOING_SERVICES=AFERO_ALLOW_SERVICE_OUTPUT

AFERO_WHITELIST_INPUT_CHAIN=AFERO_ALLOW_WHITELIST_INPUT
AFERO_WHITELIST_OUTPUT_CHAIN=AFERO_ALLOW_WHITELIST_OUTPUT


#############################################################################
# Flush the INPUT chain, and the OUTPUT chain, afero-based chains
#
echo "Flushing INPUT, OUTPUT, FORWARD chains"
$IPTABLES -F INPUT
$IPTABLES -F OUTPUT 
$IPTABLES -F FORWARD


$IPTABLES -F $AFERO_ALLOW_INCOMING_SERVICES
$IPTABLES -F $AFERO_ALLOW_OUTGOING_SERVICES

#
$IPTABLES -F $AFERO_WHITELIST_INPUT_CHAIN
$IPTABLES -F $AFERO_WHITELIST_OUTPUT_CHAIN

# Drop everything as default
# platform dependent stuff
PLATFORM=`uname -n`
echo "FW setup: PLATFORM is $PLATFORM"

if [ "$PLATFORM" = "raspberrypi3" ]; then
    $IPTABLES -P INPUT DROP
    $IPTABLES -P OUTPUT DROP
    $IPTABLES -P FORWARD DROP
fi 

# FORWARDING chain names
#  - create chain names for the FORWARD
AFERO_FORWARD_SERVICE=AFERO_FORWARD_ACCEPT_SERVICE
AFERO_FORWARD_WHITELIST=AFERO_FORWARD_WHITELIST

$IPTABLES -F $AFERO_FORWARD_SERVICE
$IPTABLES -F $AFERO_FORWARD_WHITELIST

$IPTABLES -N $AFERO_FORWARD_SERVICE
$IPTABLES -A FORWARD -j $AFERO_FORWARD_SERVICE

$IPTABLES -N $AFERO_FORWARD_WHITELIST
$IPTABLES -A FORWARD -j $AFERO_FORWARD_WHITELIST
$IPTABLES -A FORWARD -j REJECT


# INPUT - incoming service allowed
$IPTABLES -N $AFERO_ALLOW_INCOMING_SERVICES
$IPTABLES -t filter -A INPUT  -m comment --comment "Incoming rules supported service needed by Bento" \
		-j $AFERO_ALLOW_INCOMING_SERVICES

# OUTPUT - outgoing service allowed
$IPTABLES -N $AFERO_ALLOW_OUTGOING_SERVICES
	$IPTABLES -t filter -A OUTPUT -m comment --comment "Outgoing rules supported service needed by Bento" \
		-j $AFERO_ALLOW_OUTGOING_SERVICES

#
# whitelist -- create the whitelist chain names
#
$IPTABLES -N $AFERO_WHITELIST_INPUT_CHAIN
$IPTABLES -t filter -A INPUT  -m comment --comment "Afero whitelist allowed servers incoming rules" \
			-j $AFERO_WHITELIST_INPUT_CHAIN

$IPTABLES -N $AFERO_WHITELIST_OUTPUT_CHAIN
$IPTABLES -t filter -A OUTPUT  -m comment --comment "Afero whitelist allowed servers outgoing rules" \
		-j $AFERO_WHITELIST_OUTPUT_CHAIN


#############################################################################
# take care the traffic on the loopback interface
#
$IPTABLES -A INPUT -i lo -j ACCEPT -m comment --comment "loopback itf"
$IPTABLES -A OUTPUT -o lo -j ACCEPT -m comment --comment "loopback itf"


#############################################################################
##
## ALLOW DNS connection on Wi-Fi STA and WAN
##       ICMP (request & reply)
##       NTP 
##       DHCP 
##

##
# DNS service 
echo "Specifiy the allowed services"
echo "  -- DNS -- "
for ifname in $WHITELIST_INTERFACES;
do
	# OUTGOING rules
	$IPTABLES -A $AFERO_ALLOW_OUTGOING_SERVICES -p udp -o $ifname --dport 53 -j ACCEPT \
		-m comment --comment "DNS"

	# INCOMING rules
	$IPTABLES -A $AFERO_ALLOW_INCOMING_SERVICES -p udp -i $ifname --sport 53 -j ACCEPT \
		-m comment --comment "DNS"

done
#
# FORWARDING rules
#
# forwarding from extender to master (from bridge lan)
$IPTABLES -A $AFERO_FORWARD_SERVICE -i $BRIDGE_INTERFACE_0 -p udp --dport 53 -j ACCEPT \
	-m comment --comment "DNS request"

# accepting reply from master to extender (via the bridged interface)
$IPTABLES -A $AFERO_FORWARD_SERVICE -o $BRIDGE_INTERFACE_0 -p udp --sport 53 -j ACCEPT \
	-m comment --comment "DNS reply"


# ALLOW outgoing PING (ICMP)
# for each ifname (Wi-Fi STA, WAN, ethernet)
#
echo "  -- PING -- "
for ifname in $WHITELIST_INTERFACES;
do
	$IPTABLES -A $AFERO_ALLOW_OUTGOING_SERVICES -o $ifname -p icmp --icmp-type echo-request \
		-j ACCEPT -m comment --comment "icmp request rule"
	$IPTABLES -A $AFERO_ALLOW_INCOMING_SERVICES -i $ifname -p icmp --icmp-type echo-reply \
		-j ACCEPT -m comment --comment "icmp reply rule"
done



#
# FORWARDING rules
#
# forwarding from extender to master (from bridged interface)
$IPTABLES -A $AFERO_FORWARD_SERVICE -i $BRIDGE_INTERFACE_0 -p icmp --icmp-type echo-request -j ACCEPT \
		-m comment --comment "icmp request rule"

# accepting reply from master to extender (via the bridged interface)
$IPTABLES -A $AFERO_FORWARD_SERVICE -o $BRIDGE_INTERFACE_0 -p icmp --icmp-type echo-repl -j ACCEPT \
		-m comment --comment "icmp reply rule"



# ALLOW using NTP (as a client)
#
# for each ifname (Wi-Fi STA, WAN, ethernet)
#
echo "  -- NTP -- "
for ifname in $WHITELIST_INTERFACES;
do
	$IPTABLES -A $AFERO_ALLOW_OUTGOING_SERVICES -o $ifname -p udp --dport 123 \
		-m state --state NEW,ESTABLISHED,RELATED -j ACCEPT -m comment --comment "NTP rule"

	$IPTABLES -A $AFERO_ALLOW_INCOMING_SERVICES -i $ifname -p udp --sport 123 \
		-m state --state ESTABLISHED,RELATED -j ACCEPT -m comment --comment "NTP rule"

done
#
# FORWARDING rules
#
# forwarding from extender to master (from bridged interface)
$IPTABLES -A $AFERO_FORWARD_SERVICE -i $BRIDGE_INTERFACE_0 -p udp --dport 123 -j ACCEPT \
		-m comment --comment "NTP"

# accepting reply from master to extender (via the bridged interface)
$IPTABLES -A $AFERO_FORWARD_SERVICE -o $BRIDGE_INTERFACE_0 -p  udp --sport 123 \
		-m state --state ESTABLISHED,RELATED -j ACCEPT \
		-m comment --comment "NTP"


# ALLOW using DHCP (renewal)
#
echo "  -- DHCP -- "
# for each ifname (Wi-Fi STA, WAN, ethernet)
#
for ifname in $WHITELIST_INTERFACES;
do 
	$IPTABLES -A $AFERO_ALLOW_INCOMING_SERVICES -i $ifname -p udp --sport 67:68 \
		-m state --state ESTABLISHED,RELATED -j ACCEPT \
		-m comment --comment "DHCP rule"

	$IPTABLES  -A $AFERO_ALLOW_OUTGOING_SERVICES -o $ifname -p udp --dport 67:68 \
		-m state --state NEW,ESTABLISHED,RELATED -j ACCEPT \
		-m comment --comment "DHCP rule"
done

###### DHCP on briged interface (br-apnet)
##
## this rule is used for the bento extender, to request a dynamic (dhcp)
## IP address from the bento master.
## iptables -I AFERO_ALLOW_SERVICE_INPUT 1 -i br-apnet -p udp --dport 67:68  \
##     -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT
##
## On the Master Benter, the incoming traffic is from bridged interface
##
$IPTABLES -A $AFERO_ALLOW_INCOMING_SERVICES -i $BRIDGE_INTERFACE_0 -p udp --dport 67:68 \
        -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT \
        -m comment --comment "DHCP:Bento ext -> Bento AP"

## iptables -I AFERO_ALLOW_SERVICE_OUTPUT 1 -o br-apnet -p udp --sport 67:68 -j ACCEPT
$IPTABLES -A $AFERO_ALLOW_OUTGOING_SERVICES -o $BRIDGE_INTERFACE_0 -p udp --sport 67:68 \
        -j ACCEPT -m comment --comment "DHCP:Bento AP -> Bento ext"


#
# FORWARD rules
#
$IPTABLES -A $AFERO_FORWARD_SERVICE -i $BRIDGE_INTERFACE_0 -p udp --sport 67:68 -j ACCEPT \
		-m comment --comment "DHCP rule"

$IPTABLES  -A $AFERO_FORWARD_SERVICE -o $BRIDGE_INTERFACE_0 -p udp --dport 67:68 \
		-m state --state ESTABLISHED,RELATED -j ACCEPT \
		-m comment --comment "DHCP rule"



# ALLOW SSH for NOW -- TODO: remove before ship
#
# incoming SSH connection (on wifi )
echo "Specifiy the TEMPOARILY/DEV allowed services -- REMOVE BEFORE SHIP"
echo "  -- SSH -- "
$IPTABLES -A INPUT  -i ${WIFISTA_INTERFACE_0} -p tcp --dport 22 -m state --state NEW,ESTABLISHED -j ACCEPT \
    -m comment --comment "Allow SSH - REMOVE before ship"
$IPTABLES -A OUTPUT -o ${WIFISTA_INTERFACE_0} -p tcp --sport 22 -m state --state ESTABLISHED -j ACCEPT \
    -m comment --comment "Allow SSH - REMOVE before ship"

####### ethernet
$IPTABLES -A INPUT  -i ${ETH_INTERFACE_0} -p tcp --dport 22  -j ACCEPT \
			-m comment --comment "Allow SSH - REMOVE before ship"
$IPTABLES -A OUTPUT -o ${ETH_INTERFACE_0} -p tcp --sport 22 -m state --state ESTABLISHED -j ACCEPT \
			-m comment --comment "Allow SSH - REMOVE before ship"



# outgoing SSH connection (on wifi )
$IPTABLES -A OUTPUT -o ${WIFISTA_INTERFACE_0} -p tcp --dport 22 -m state --state NEW,ESTABLISHED -j ACCEPT \
    -m comment --comment "Allow SSH - REMOVE before ship"
$IPTABLES -A INPUT -i ${WIFISTA_INTERFACE_0} -p tcp --sport 22 -m state --state ESTABLISHED -j ACCEPT \
    -m comment --comment "Allow SSH - REMOVE before ship"

###### ethernet
$IPTABLES -A OUTPUT -o ${ETH_INTERFACE_0} -p tcp --dport 22 -j ACCEPT \
    -m comment --comment "Allow SSH - REMOVE before ship"
$IPTABLES -A INPUT -i ${ETH_INTERFACE_0} -p tcp --sport 22 -m state --state ESTABLISHED -j ACCEPT \
    -m comment --comment "Allow SSH - REMOVE before ship"


### adding the firewall rules for afero whitelist
###
if [ -e /etc/config/create_afero_whitelist.sh ]
then
    logger "Running the create_afero_whitelist script ...."

    /bin/sh /etc/config/create_afero_whitelist.sh
else
    logger "Warning: /etc/config/create_afero_whitelist.sh does not exist"
fi

